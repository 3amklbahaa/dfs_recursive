#include <stdio.h>
#include <stdlib.h>
typedef struct graph {
    int vertices;
    int** adjMatrix;
} graph;
graph* creategraph(int vertices) {
    graph* graph1 = (graph*)malloc(sizeof(graph));
    graph1->vertices = vertices;
    graph1->adjMatrix = (int**)malloc(vertices * sizeof(int*));
    for (int i = 0; i < vertices; ++i) {
        graph1->adjMatrix[i] = (int*)malloc(vertices * sizeof(int));
        for (int j = 0; j < vertices; ++j) {
            graph1->adjMatrix[i][j] = 0;
        }
    }
    return graph1;
}
void addEdge(graph* graph, int src, int dest) {
    graph->adjMatrix[src][dest] = 1;
    graph->adjMatrix[dest][src] = 1;
}
void dfs_with_recursion_helper(graph* graph1,int vertex, int visited[]){
    visited[vertex]=1;
    printf("%d",vertex);
    for(int i=0;i<graph1->vertices;i++){
        if(graph1->adjMatrix[vertex][i]==1&&!visited[i]){
            dfs_with_recursion_helper(graph1,i,visited);
        }
    }
}
void dfs_recursive(graph* graph1, int start_vertex){
    int* visited = (int*)malloc(graph1->vertices*sizeof(int));
    for(int i=0;i<graph1->vertices;i++){
        visited[i]=0;
    }
    dfs_with_recursion_helper(graph1,start_vertex,visited);
    free(visited);
}
int main() {
    int vertices = 6;
    graph* graph1 = creategraph(vertices);

    addEdge(graph1, 0, 1);
    addEdge(graph1, 0, 2);
    addEdge(graph1, 1, 3);
    addEdge(graph1, 1, 4);
    addEdge(graph1, 2, 5);

    printf("DFS_recursive: ");
    dfs_recursive(graph1, 0);
    printf("\n");
    return 0;
}
